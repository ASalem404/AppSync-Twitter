org: ahmed404
service: appsync-backend

frameworkVersion: "2"

provider:
  name: aws
  region: us-east-1
  runtime: nodejs20.x
  stage: dev

  # Enabling AWS Node.js connection reuse improves performance by reducing latency and resource consumption,
  # as it allows multiple requests to use the same TCP connection, rather than opening new ones each time.
  # This leads to cost savings, better scalability, and helps prevent socket exhaustion in high-concurrency environments,
  # making the application more efficient overall.

  AWS_CONNECTION_REUSE_ENABLED: "1"

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env
  - serverless-manifest-plugin

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  appSync:
    - ${file(serverless.appsync-api.yml)}

  manifest:
    postProcess: ./processManifest.js
    disablePostDeployGeneration: true
    disableOutputs: true
    silent: true

functions:
  ConfirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        Tags:
          - Key: Name
            Value: UsersTable
          - Key: Environment
            Value: ${self:custom.stage}

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true

        # Invoke the Lambda function after the user is signing up
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    # Add Permission for Cognito to invoke the Lambda function
    UserPoolInvokeConfirmSignupFunctionPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt ConfirmUserSignupLambdaFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        PreventUserExistenceErrors: ENABLED

  Outputs:
    AwsREGION:
      Value: ${self:custom.region}
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    CognitoUserPoolClientId:
      Value: !Ref WebUserPoolClient
